import { useEffect } from 'react';

interface SimpleConfettiProps {
  isActive: boolean;
}

const SimpleConfetti = ({ isActive }: SimpleConfettiProps) => {
  useEffect(() => {
    console.log('Confetti useEffect –≤—ã–∑–≤–∞–Ω, isActive:', isActive);
    
    if (!isActive) {
      console.log('–ö–æ–Ω—Ñ–µ—Ç—Ç–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ, –≤—ã—Ö–æ–¥–∏–º');
      return;
    }

    console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –ø–ª–∞–≤–Ω–æ–µ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏!');

    let intervalId: NodeJS.Timeout;

    // –†–∞–∑–Ω—ã–µ —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞
    const colors = [
      '#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57',
      '#FF9FF3', '#54A0FF', '#5F27CD', '#00D2D3', '#FF9F43',
      '#10AC84', '#EE5A6F', '#C44569', '#786FA6', '#F8B500',
      '#A55EEA', '#26DE81', '#FD79A8', '#FDCB6E', '#E17055'
    ];

    // –†–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã
    const shapes = [
      { type: 'circle' },
      { type: 'square' },
      { type: 'triangle' },
      { type: 'star' },
      { type: 'heart' },
      { type: 'diamond' }
    ];

    const createConfetti = () => {
      const confetti = document.createElement('div');
      
      // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –Ω–µ–±–æ–ª—å—à–æ–≥–æ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
      const shape = shapes[Math.floor(Math.random() * shapes.length)];
      const color = colors[Math.floor(Math.random() * colors.length)];
      const size = Math.random() * 4 + 4; // –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä: –æ—Ç 4px –¥–æ 8px
      const startX = Math.random() * 100;
      const fallDuration = 10000; // –û–î–ò–ù–ê–ö–û–í–ê–Ø –ø–ª–∞–≤–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å - 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –≤—Å–µ—Ö
      const rotationSpeed = 360; // –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –ø–ª–∞–≤–Ω–æ–µ –≤—Ä–∞—â–µ–Ω–∏–µ
      const horizontalDrift = 0; // –ë–ï–ó –±–æ–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è - —Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–µ –ø–∞–¥–µ–Ω–∏–µ
      
      // –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏
      confetti.style.position = 'fixed';
      confetti.style.left = startX + '%';
      confetti.style.top = '-30px';
      confetti.style.width = size + 'px';
      confetti.style.height = size + 'px';
      confetti.style.zIndex = '10000';
      confetti.style.pointerEvents = 'none';
      confetti.style.userSelect = 'none';
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º—ã
      switch(shape.type) {
        case 'circle':
          confetti.style.backgroundColor = color;
          confetti.style.borderRadius = '50%';
          confetti.style.boxShadow = `0 0 8px ${color}50`;
          break;
        case 'square':
          confetti.style.backgroundColor = color;
          confetti.style.borderRadius = '2px';
          confetti.style.boxShadow = `0 0 8px ${color}50`;
          break;
        case 'triangle':
          confetti.style.width = '0';
          confetti.style.height = '0';
          confetti.style.borderLeft = size/2 + 'px solid transparent';
          confetti.style.borderRight = size/2 + 'px solid transparent';
          confetti.style.borderBottom = size + 'px solid ' + color;
          confetti.style.filter = `drop-shadow(0 0 6px ${color}50)`;
          break;
        case 'star':
          confetti.innerHTML = '‚≠ê';
          confetti.style.fontSize = size + 'px';
          confetti.style.lineHeight = '1';
          confetti.style.color = color;
          confetti.style.filter = `drop-shadow(0 0 6px ${color}60)`;
          break;
        case 'heart':
          confetti.innerHTML = 'üíñ';
          confetti.style.fontSize = size + 'px';
          confetti.style.lineHeight = '1';
          confetti.style.filter = `hue-rotate(${Math.random() * 360}deg)`;
          break;
        case 'diamond':
          confetti.style.backgroundColor = color;
          confetti.style.width = size + 'px';
          confetti.style.height = size + 'px';
          confetti.style.transform = 'rotate(45deg)';
          confetti.style.boxShadow = `0 0 8px ${color}50`;
          break;
      }
      
      // –°–æ–∑–¥–∞—ë–º –ò–î–ï–ê–õ–¨–ù–û –ø–ª–∞–≤–Ω—É—é –∞–Ω–∏–º–∞—Ü–∏—é –ë–ï–ó —Ä—ã–≤–∫–æ–≤
      const animationId = `confetti-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
      
      const keyframes = `
        @keyframes ${animationId} {
          0% {
            transform: translateY(-30px) translateX(0px) rotate(0deg);
            opacity: 0;
          }
          5% {
            opacity: 1;
          }
          95% {
            opacity: 1;
          }
          100% {
            transform: translateY(110vh) translateX(0px) rotate(${rotationSpeed}deg);
            opacity: 0;
          }
        }
      `;
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏
      const styleElement = document.createElement('style');
      styleElement.textContent = keyframes;
      document.head.appendChild(styleElement);
      
      // –ü—Ä–∏–º–µ–Ω—è–µ–º –õ–ò–ù–ï–ô–ù–£–Æ –∞–Ω–∏–º–∞—Ü–∏—é –±–µ–∑ —É—Å–∫–æ—Ä–µ–Ω–∏–π
      confetti.style.animation = `${animationId} ${fallDuration}ms linear forwards`;
      
      document.body.appendChild(confetti);
      
      // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
      setTimeout(() => {
        if (confetti.parentNode) {
          confetti.parentNode.removeChild(confetti);
        }
        if (styleElement.parentNode) {
          styleElement.parentNode.removeChild(styleElement);
        }
      }, fallDuration + 1000);
    };

    const createConfettiBurst = () => {
      // –°–æ–∑–¥–∞—ë–º –Ω–µ–±–æ–ª—å—à—É—é –≥—Ä—É–ø–ø—É –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
      const burstSize = Math.random() * 3 + 2; // –æ—Ç 2 –¥–æ 5 —á–∞—Å—Ç–∏—Ü
      
      for (let i = 0; i < burstSize; i++) {
        setTimeout(() => {
          createConfetti();
        }, i * Math.random() * 300); // –ø–ª–∞–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
      }
    };

    // –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ —Å –ø—Ä–∏—è—Ç–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
    intervalId = setInterval(() => {
      createConfettiBurst();
    }, Math.random() * 800 + 600); // –æ—Ç 600–º—Å –¥–æ 1400–º—Å –º–µ–∂–¥—É –≥—Ä—É–ø–ø–∞–º–∏
    
    // –°—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É
    createConfettiBurst();

    return () => {
      console.log('–û—á–∏—â–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ–Ω—Ñ–µ—Ç—Ç–∏');
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [isActive]);

  return null;
};

export default SimpleConfetti;