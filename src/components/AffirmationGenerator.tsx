import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import Icon from '@/components/ui/icon';
import AffirmationDocument from './AffirmationDocument';

interface PaymentFormData {
  email: string;
  phone: string;
  whatsapp: string;
}

const AffirmationGenerator: React.FC = () => {
  const [step, setStep] = useState<'form' | 'preview' | 'payment'>('form');
  const [affirmationType, setAffirmationType] = useState<'love' | 'money' | 'health' | 'career' | 'custom'>('love');
  const [userName, setUserName] = useState('');
  const [customTitle, setCustomTitle] = useState('');
  const [customDesires, setCustomDesires] = useState('');
  const [paymentData, setPaymentData] = useState<PaymentFormData>({
    email: '',
    phone: '',
    whatsapp: ''
  });
  const [isPaid, setIsPaid] = useState(false);
  const documentRef = useRef<HTMLDivElement>(null);

  const affirmationTypes = [
    { value: 'love', label: 'üíï –õ—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è', emoji: 'üíï' },
    { value: 'money', label: 'üí∞ –ë–æ–≥–∞—Ç—Å—Ç–≤–æ –∏ –∏–∑–æ–±–∏–ª–∏–µ', emoji: 'üí∞' },
    { value: 'health', label: 'üåø –ó–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è', emoji: 'üåø' },
    { value: 'career', label: 'üöÄ –ö–∞—Ä—å–µ—Ä–∞ –∏ —É—Å–ø–µ—Ö', emoji: 'üöÄ' },
    { value: 'custom', label: '‚ú® –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è', emoji: '‚ú®' },
  ];

  const parseCustomDesires = (text: string): string[] => {
    return text
      .split('\n')
      .map(line => line.trim())
      .filter(line => line.length > 0)
      .map(line => line.startsWith('-') || line.startsWith('‚Ä¢') ? line.substring(1).trim() : line);
  };

  const generatePDF = async () => {
    if (!documentRef.current) return;

    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
      // –ù–∞–ø—Ä–∏–º–µ—Ä: html2pdf, jsPDF, puppeteer –Ω–∞ –±—ç–∫–µ–Ω–¥–µ
      const element = documentRef.current;
      
      // –≠–º—É–ª—è—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      
      // –°–æ–∑–¥–∞–µ–º blob –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
      const blob = new Blob(['PDF Content'], { type: 'application/pdf' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `–ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è_${userName.replace(/\s+/g, '_')}_${new Date().toISOString().split('T')[0]}.pdf`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const sendToEmailAndWhatsApp = async () => {
    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const formData = {
        userName,
        affirmationType,
        customTitle,
        desires: affirmationType === 'custom' ? parseCustomDesires(customDesires) : [],
        email: paymentData.email,
        whatsapp: paymentData.whatsapp
      };

      // –≠–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ API –∑–∞–ø—Ä–æ—Å–∞
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏:', formData);
      
      // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      setTimeout(() => {
        alert(`‚úÖ –ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞:\nüìß Email: ${paymentData.email}\nüì± WhatsApp: ${paymentData.whatsapp}`);
        setIsPaid(true);
      }, 1000);

    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ:', error);
      alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
  };

  const handlePayment = async () => {
    if (!paymentData.email || !paymentData.whatsapp) {
      alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ email –∏ WhatsApp –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞');
      return;
    }

    // –≠–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã
    const confirmed = confirm(`–û–ø–ª–∞—Ç–∏—Ç—å 299‚ÇΩ –∑–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é?\n\n–î–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞:\nüìß ${paymentData.email}\nüì± WhatsApp: ${paymentData.whatsapp}`);
    
    if (confirmed) {
      // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
      await sendToEmailAndWhatsApp();
    }
  };

  if (step === 'form') {
    return (
      <Card className="max-w-2xl mx-auto">
        <CardHeader className="text-center">
          <CardTitle className="text-2xl text-primary flex items-center justify-center gap-2">
            <Icon name="Sparkles" size={28} />
            –°–æ–∑–¥–∞–Ω–∏–µ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏
          </CardTitle>
          <p className="text-muted-foreground">
            –°–æ–∑–¥–∞–π—Ç–µ –º–æ—â–Ω—É—é –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ø–æ–¥ –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è
          </p>
        </CardHeader>
        <CardContent className="space-y-6">
          <div>
            <label className="block text-sm font-medium mb-2">–í–∞—à–µ –∏–º—è</label>
            <Input
              value={userName}
              onChange={(e) => setUserName(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
              className="w-full"
            />
          </div>

          <div>
            <label className="block text-sm font-medium mb-2">–¢–∏–ø –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏</label>
            <Select value={affirmationType} onValueChange={(value: any) => setAffirmationType(value)}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {affirmationTypes.map((type) => (
                  <SelectItem key={type.value} value={type.value}>
                    {type.label}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          {affirmationType === 'custom' && (
            <>
              <div>
                <label className="block text-sm font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏</label>
                <Input
                  value={customTitle}
                  onChange={(e) => setCustomTitle(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ü–≤–µ—Ç–∞–Ω–∏—è"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">–í–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è –∏ —Ü–µ–ª–∏</label>
                <Textarea
                  value={customDesires}
                  onChange={(e) => setCustomDesires(e.target.value)}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∂–µ–ª–∞–Ω–∏—è –∏ —Ü–µ–ª–∏. –ö–∞–∂–¥—É—é —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ."
                  rows={8}
                  className="resize-none"
                />
                <p className="text-xs text-muted-foreground mt-1">
                  –ü—Ä–∏–º–µ—Ä: - –Ø –ø—Ä–∏–≤–ª–µ–∫–∞—é –∏–∑–æ–±–∏–ª–∏–µ –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å
                </p>
              </div>
            </>
          )}

          <Button 
            onClick={() => setStep('preview')}
            className="w-full"
            disabled={!userName}
          >
            <Icon name="Eye" size={20} className="mr-2" />
            –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä
          </Button>
        </CardContent>
      </Card>
    );
  }

  if (step === 'preview') {
    const selectedType = affirmationTypes.find(t => t.value === affirmationType);
    
    return (
      <div className="space-y-6">
        <Card>
          <CardContent className="p-6 text-center">
            <h2 className="text-xl font-bold mb-2">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä</h2>
            <p className="text-muted-foreground mb-4">
              {selectedType?.emoji} {selectedType?.label} –¥–ª—è {userName}
            </p>
            <div className="flex gap-4 justify-center">
              <Button variant="outline" onClick={() => setStep('form')}>
                <Icon name="ArrowLeft" size={16} className="mr-2" />
                –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
              </Button>
              <Button onClick={() => setStep('payment')}>
                <Icon name="CreditCard" size={16} className="mr-2" />
                –ó–∞–∫–∞–∑–∞—Ç—å –∑–∞ 299‚ÇΩ
              </Button>
            </div>
          </CardContent>
        </Card>

        <div ref={documentRef}>
          <AffirmationDocument
            type={affirmationType}
            customTitle={customTitle}
            userName={userName}
            userDesires={affirmationType === 'custom' ? parseCustomDesires(customDesires) : []}
            createdDate={new Date().toLocaleDateString('ru-RU')}
          />
        </div>
      </div>
    );
  }

  return (
    <Card className="max-w-md mx-auto">
      <CardHeader className="text-center">
        <CardTitle className="text-xl text-primary flex items-center justify-center gap-2">
          <Icon name="CreditCard" size={24} />
          –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        </CardTitle>
        <p className="text-muted-foreground">
          –°—Ç–æ–∏–º–æ—Å—Ç—å: <span className="font-bold text-lg">299‚ÇΩ</span>
        </p>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <label className="block text-sm font-medium mb-2">Email –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è PDF</label>
          <Input
            type="email"
            value={paymentData.email}
            onChange={(e) => setPaymentData({...paymentData, email: e.target.value})}
            placeholder="your@email.com"
          />
        </div>

        <div>
          <label className="block text-sm font-medium mb-2">WhatsApp (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã)</label>
          <Input
            type="tel"
            value={paymentData.whatsapp}
            onChange={(e) => setPaymentData({...paymentData, whatsapp: e.target.value})}
            placeholder="+7 999 123-45-67"
          />
        </div>

        <div className="text-center space-y-3">
          <Button onClick={handlePayment} className="w-full" size="lg">
            <Icon name="Zap" size={20} className="mr-2" />
            –û–ø–ª–∞—Ç–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é
          </Button>
          
          <Button variant="outline" onClick={() => setStep('preview')} className="w-full">
            <Icon name="ArrowLeft" size={16} className="mr-2" />
            –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É
          </Button>
        </div>

        <div className="text-xs text-muted-foreground text-center">
          –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
        </div>
      </CardContent>
    </Card>
  );
};

export default AffirmationGenerator;