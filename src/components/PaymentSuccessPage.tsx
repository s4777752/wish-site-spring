import React, { useState } from 'react';
import Icon from '@/components/ui/icon';
import SimpleConfetti from '@/components/SimpleConfetti';

interface PaymentSuccessPageProps {
  onDownload: () => void;
  onClose: () => void;
  amount: number;
}

const PaymentSuccessPage: React.FC<PaymentSuccessPageProps> = ({
  onDownload,
  onClose,
  amount
}) => {
  const [showConfetti, setShowConfetti] = useState(false);
  
  console.log('PaymentSuccessPage —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è, showConfetti:', showConfetti);

  const playConfettiSound = async () => {
    try {
      // –°–æ–∑–¥–∞–µ–º –∑–≤—É–∫ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ —Å –ø–æ–º–æ—â—å—é Web Audio API
      const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
      
      // –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –æ–Ω –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–Ω—É–∂–Ω–æ –¥–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤)
      if (audioContext.state === 'suspended') {
        await audioContext.resume();
      }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–æ–ª—å–≤–µ—Ä –¥–ª—è —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏
    const convolver = audioContext.createConvolver();
    const reverbGain = audioContext.createGain();
    const dryGain = audioContext.createGain();
    const masterGain = audioContext.createGain();
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è mix dry/wet —Å–∏–≥–Ω–∞–ª–∞
    dryGain.gain.value = 0.6; // –°—É—Ö–æ–π —Å–∏–≥–Ω–∞–ª
    reverbGain.gain.value = 0.4; // –°–∏–≥–Ω–∞–ª —Å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–µ–π
    masterGain.gain.value = 0.3; // –û–±—â–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
    
    // –°–æ–∑–¥–∞–µ–º –∏–º–ø—É–ª—å—Å–Ω—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –¥–ª—è —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏ (–∏–º–∏—Ç–∞—Ü–∏—è –±–æ–ª—å—à–æ–≥–æ –∑–∞–ª–∞)
    const sampleRate = audioContext.sampleRate;
    const length = sampleRate * 2; // 2 —Å–µ–∫—É–Ω–¥—ã —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏
    const impulse = audioContext.createBuffer(2, length, sampleRate);
    
    for (let channel = 0; channel < 2; channel++) {
      const channelData = impulse.getChannelData(channel);
      for (let i = 0; i < length; i++) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞—Ç—É—Ö–∞—é—â–∏–π –±–µ–ª—ã–π —à—É–º –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–∏ –∑–∞–ª–∞
        const decay = Math.pow(1 - i / length, 2);
        channelData[i] = (Math.random() * 2 - 1) * decay * 0.1;
      }
    }
    
    convolver.buffer = impulse;
    
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ü–µ–ø–æ—á–∫—É —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    dryGain.connect(masterGain);
    reverbGain.connect(convolver);
    convolver.connect(masterGain);
    masterGain.connect(audioContext.destination);
    
    // –¢–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–æ—Ç—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å)
    const frequencies = [
      261, 330, 392, 523, // C4, E4, G4, C5 - –æ—Å–Ω–æ–≤–Ω–æ–π –∞–∫–∫–æ—Ä–¥
      659, 784, 1047, 1319, 1568 // E5, G5, C6, E6, G6 - –≤—ã—Å–æ–∫–∏–µ –Ω–æ—Ç—ã
    ];
    
    frequencies.forEach((freq, index) => {
      const oscillator = audioContext.createOscillator();
      const gainNode = audioContext.createGain();
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –æ–±–µ–∏–º —Ü–µ–ø–æ—á–∫–∞–º (—Å—É—Ö–æ–π –∏ —Å —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–µ–π)
      oscillator.connect(gainNode);
      gainNode.connect(dryGain);
      gainNode.connect(reverbGain);
      
      oscillator.frequency.setValueAtTime(freq, audioContext.currentTime);
      oscillator.type = 'triangle';
      
      // –ë–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–µ –Ω–∞—Ä–∞—Å—Ç–∞–Ω–∏–µ –∏ –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –¥–ª—è —Ç–æ—Ä–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
      const startTime = audioContext.currentTime + index * 0.08;
      const duration = 0.6;
      
      gainNode.gain.setValueAtTime(0, startTime);
      gainNode.gain.linearRampToValueAtTime(0.15, startTime + 0.05);
      gainNode.gain.exponentialRampToValueAtTime(0.01, startTime + duration);
      
      oscillator.start(startTime);
      oscillator.stop(startTime + duration);
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π "–≤–∑—Ä—ã–≤" –≤ –Ω–∞—á–∞–ª–µ
    const explosionOsc = audioContext.createOscillator();
    const explosionGain = audioContext.createGain();
    
    explosionOsc.connect(explosionGain);
    explosionGain.connect(dryGain);
    explosionGain.connect(reverbGain);
    
    explosionOsc.type = 'sawtooth';
    explosionOsc.frequency.setValueAtTime(80, audioContext.currentTime);
    explosionOsc.frequency.exponentialRampToValueAtTime(200, audioContext.currentTime + 0.1);
    
    explosionGain.gain.setValueAtTime(0.2, audioContext.currentTime);
    explosionGain.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.15);
    
    explosionOsc.start(audioContext.currentTime);
    explosionOsc.stop(audioContext.currentTime + 0.15);
    
    console.log('üîä –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏!');
    
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞:', error);
      // Fallback - –ø—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
      try {
        const audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();
        const oscillator = audioContext.createOscillator();
        const gainNode = audioContext.createGain();
        
        oscillator.connect(gainNode);
        gainNode.connect(audioContext.destination);
        
        oscillator.frequency.setValueAtTime(800, audioContext.currentTime);
        oscillator.type = 'triangle';
        
        gainNode.gain.setValueAtTime(0.1, audioContext.currentTime);
        gainNode.gain.exponentialRampToValueAtTime(0.01, audioContext.currentTime + 0.3);
        
        oscillator.start(audioContext.currentTime);
        oscillator.stop(audioContext.currentTime + 0.3);
        
        console.log('üîä Fallback –∑–≤—É–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω');
      } catch (fallbackError) {
        console.error('–î–∞–∂–µ fallback –∑–≤—É–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', fallbackError);
      }
    }
  };

  const handleDownload = () => {
    console.log('üéâ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏!');
    setShowConfetti(true);
    playConfettiSound();
    onDownload();
  };

  const handleClose = () => {
    console.log('üéâ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏!');
    setShowConfetti(true);
    playConfettiSound();
    setTimeout(() => {
      onClose();
    }, 1000); // –î–∞—ë–º –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
  };

  return (
    <div className="fixed inset-0 bg-gray-50 flex items-center justify-center z-50">
      {/* –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç */}
      <div style={{ zIndex: 99999 }}>
        <SimpleConfetti isActive={showConfetti} />
      </div>
      <div className="bg-white rounded-2xl shadow-2xl max-w-md w-full mx-4 p-8 text-center">
        {/* –ò–∫–æ–Ω–∫–∞ —É—Å–ø–µ—Ö–∞ */}
        <div className="w-20 h-20 mx-auto mb-6 bg-blue-100 rounded-full flex items-center justify-center">
          <div className="w-12 h-12 bg-blue-500 rounded-full flex items-center justify-center">
            <Icon name="Check" className="w-6 h-6 text-white" />
          </div>
        </div>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <h1 className="text-2xl font-bold text-gray-900 mb-2">
          –û–ø–ª–∞—á–µ–Ω–æ
        </h1>

        {/* –°—É–º–º–∞ */}
        <div className="text-lg text-gray-600 mb-8">
          {amount} ‚ÇΩ
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è */}
        <button
          onClick={handleDownload}
          className="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white font-semibold py-4 px-6 rounded-xl hover:from-purple-700 hover:to-blue-700 transition-all duration-200 mb-4 flex items-center justify-center gap-2"
        >
          <Icon name="Download" size={20} />
          –°–∫–∞—á–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç
        </button>

        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
        <button
          onClick={handleClose}
          className="w-full bg-yellow-400 hover:bg-yellow-500 text-black font-semibold py-3 px-6 rounded-xl transition-colors duration-200"
        >
          –ó–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ
        </button>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <p className="text-sm text-gray-500 mt-6">
          –í–∞—à –¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é. 
          –ï—Å–ª–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ.
        </p>
      </div>
    </div>
  );
};

export default PaymentSuccessPage;